# Docker Compose per ShopSphere
# Orchestrazione MySQL + MongoDB

version: '3.8'

services:
  # ====================
  # MySQL Database
  # ====================
  mysql:
    image: mysql:8.0                    # Immagine ufficiale MySQL versione 8.0
    container_name: shopsphere-mysql    # Nome del container (facile da identificare)
    restart: unless-stopped             # Riavvia automaticamente tranne se fermato manualmente
    environment:
      MYSQL_ROOT_PASSWORD: root123      # Password utente root (SOLO PER SVILUPPO!)
      MYSQL_DATABASE: shopsphere        # Crea automaticamente database "shopsphere"
      MYSQL_USER: shopsphere_user       # Utente applicativo (non root)
      MYSQL_PASSWORD: shopsphere_pass   # Password utente applicativo
    ports:
      - "3306:3306"                     # Porta esposta: locale:container
    volumes:
      - mysql_data:/var/lib/mysql       # Persistenza dati (volume Docker)
      - ./database/sql:/docker-entrypoint-initdb.d  # Script SQL eseguiti all'avvio
    networks:
      - shopsphere-network              # Rete condivisa tra i servizi
    healthcheck:                        # Controlla se MySQL Ã¨ pronto
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot123"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ====================
  # MongoDB Database
  # ====================
  mongodb:
    image: mongo:7.0                    # Immagine ufficiale MongoDB versione 7.0
    container_name: shopsphere-mongodb  # Nome del container
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root  # Username root MongoDB
      MONGO_INITDB_ROOT_PASSWORD: root123  # Password root
      MONGO_INITDB_DATABASE: shopsphere # Database iniziale
    ports:
      - "27017:27017"                   # Porta standard MongoDB
    volumes:
      - mongodb_data:/data/db           # Persistenza dati MongoDB
      - ./database/mongodb:/docker-entrypoint-initdb.d  # Script inizializzazione
    networks:
      - shopsphere-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

# ====================
# Volumi per persistenza dati
# ====================
# I dati rimangono anche se fermiamo i container
volumes:
  mysql_data:
    driver: local                       # Salva dati localmente
  mongodb_data:
    driver: local

# ====================
# Rete condivisa
# ====================
# Permette ai container di comunicare tra loro
networks:
  shopsphere-network:
    driver: bridge
